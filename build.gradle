buildscript {
	ext.versions = [
		'compose': '1.0.0-alpha09',
		'kotlin': '1.4.21',
		'kotlinxCoroutines': '1.4.1',
	]
	ext.deps = [
		'composeCompiler': "androidx.compose.compiler:compiler:${versions.compose}",
		'kotlinGradlePlugin': "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}",
		'kotlinxCoroutinesCore': "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.kotlinxCoroutines}",
		'kotlinxCoroutinesTest': "org.jetbrains.kotlinx:kotlinx-coroutines-test:${versions.kotlinxCoroutines}",
		'junit': 'junit:junit:4.13.1',
		'truth': 'com.google.truth:truth:1.1',
	]

	dependencies {
		classpath deps.kotlinGradlePlugin
		classpath 'dev.nokee.jni-library:dev.nokee.jni-library.gradle.plugin:0.4.0'
		classpath 'com.vanniktech:gradle-maven-publish-plugin:0.13.0'
		classpath 'org.jetbrains.dokka:dokka-gradle-plugin:0.10.1'
	}
	repositories {
		mavenCentral()
		gradlePluginPortal()
	}
}

subprojects {
	group = GROUP
	version = VERSION_NAME

	repositories {
		mavenCentral()
		google()
		maven {
			url 'https://kotlin.bintray.com/kotlinx'
		}
		jcenter()
	}

	tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
		kotlinOptions {
			jvmTarget = '1.8'
		}
	}

	tasks.withType(JavaCompile).configureEach {
		sourceCompatibility = JavaVersion.VERSION_1_8
		targetCompatibility = JavaVersion.VERSION_1_8
	}

	tasks.withType(org.jetbrains.kotlin.gradle.dsl.KotlinCompile).configureEach { task ->
		task.kotlinOptions {
			freeCompilerArgs += [
				'-progressive',
				'-Xjvm-default=all',
				'-Xopt-in=kotlin.RequiresOptIn',
				'-Xopt-in=androidx.compose.runtime.ExperimentalComposeApi',
			]
		}
	}

	plugins.withId('org.jetbrains.kotlin.jvm') {
		configurations {
			kotlinPlugin
		}

		tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
			kotlinOptions {
				useIR = true
			}

			def pluginConfiguration = configurations.kotlinPlugin
			dependsOn(pluginConfiguration)
			doFirst {
				if (!pluginConfiguration.isEmpty()) {
					kotlinOptions.freeCompilerArgs += [
						"-Xplugin=${pluginConfiguration.files.first()}",
					]
				}
			}
		}
	}

	plugins.withId('com.vanniktech.maven.publish') {
		mavenPublish {
			targets {
				installArchives {
					def url = file("${rootProject.buildDir}/localMaven").toURI().toString()
					releaseRepositoryUrl = url
					snapshotRepositoryUrl = url
				}
			}
		}
	}
}
